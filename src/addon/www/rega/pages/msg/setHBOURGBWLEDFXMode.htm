<div class="popupTitle" id="pTitle"><% Write( system.GetVar("title") ); %></div>

<script type="text/javascript">
  bOkAllowed = true;
  <%
  string sType = system.GetVar("type");
  string sID = "";
  integer iColonPos = sType.Find(":");
  %>
  <%
  if ( iColonPos != -1 )
  {
    sID = sType.Substr( iColonPos+1 );
    sType = sType.Substr( 0, iColonPos );
  }
  Write( 'conInfo("InserValue Popup Type = '#sType#'");' );
  Write( 'conInfo("InserValue Popup ID = '#sID#'");' );
  %>
  <%
  object oSD = dom.GetObject( sID );
  if( oSD )
  {
    object oDP = dom.GetObject( oSD.DestinationDP() );
    object oCH = dom.GetObject( oDP.Channel() );
    integer iV = oSD.DestinationValue();
    integer iVT = oSD.DestinationValueType();
    integer iVCH = 0;
    if( iVT == ivtObjectId )
    {
      object oDestCH = dom.GetObject( iV );
      if( oDestCH )
      {
        iVCH = oDestCH.Channel();
      }
    }
  }


  %>
  <%
  string sT = "UNKNOWN TYPE ["#iVT#"]";
  if( iVT == ivtEmpty ) { sT = "ivtEmpty"; }
  if( iVT == ivtNull ) { sT = "ivtNull"; }
  if( iVT == ivtBinary ) { sT = "ivtBinary"; }
  if( iVT == ivtToggle ) { sT = "ivtToggle"; }
  if( iVT == ivtFloat ) { sT = "ivtFloat"; }
  if( iVT == ivtRelScaling ) { sT = "ivtRelScaling"; }
  if( iVT == ivtScaling ) { sT = "ivtScaling"; }
  if( iVT == ivtBitMask ) { sT = "ivtBitMask"; }
  if( iVT == ivtByte ) { sT = "ivtByte"; }
  if( iVT == ivtWord ) { sT = "ivtWord"; }
  if( iVT == ivtDate ) { sT = "ivtDate"; }
  if( iVT == ivtTime ) { sT = "ivtTime"; }
  if( iVT == ivtDateTime ) { sT = "ivtDateTime"; }
  if( iVT == ivtInteger ) { sT = "ivtInteger"; }
  if( iVT == ivtObjectId ) { sT = "ivtObjectId"; }
  if( iVT == ivtSystemId ) { sT = "ivtSystemId"; }
  if( iVT == ivtString ) { sT = "ivtString"; }
 if( iVT == ivtSceneNumber ) { sT = "ivtSceneNumber"; }
  if( iVT == ivtDeviceId ) { sT = "ivtDeviceId"; }
  if( iVT == ivtSpecialValue ) { sT = "ivtSpecialValue"; }
  Write( 'conInfo("DestinationValueType = '#sT#'");' );
  boolean bIsString = ( oDP.ValueType() == ivtString );
  Write( '$("pTitle").innerHTML = translateKey("lblSetMode"); conInfo("InsertValue: Set OU_CFM_MODE .");' );
  %>

</script>
            
<div class="CLASS01200">
  <!-- LED --> 
  <table id="tblLED" cellpadding="0" cellspacing="0" rules="rows" class="popupTableScript CLASS01201" border="1" style="display:none">
      <%
        Write('<tbody style="text-align:left">');    
         Write('<tr>');
          Write('</tr>');
            ! Helligkeit
            Write('<td colspan="6" class="OUCFMprop"><span>${lblBrightnessLevel} <span class="hintMinMaxCount"></span></span></td>');
            Write('<td colspan="5"><input id="ouBrightnessLED" type="text" style="text-align:center;" size="3"></td>');
          Write('</tr>');

            ! Speed
            Write('<td colspan="6" class="OUCFMprop"><span>${lblEffectSpeed} <span class="hintMinMaxCount"></span></span></td>');
            Write('<td colspan="5"><input id="ouSpeedLED" type="text" style="text-align:center;" size="3"></td>');
          Write('</tr>');


        
          Write('</tr>');
            ! Effekt
            Write('<td colspan="6" class="OUCFMprop"><span>${lblEffectNr} </span></td>');
            Write('<td colspan="5">');
             Write('<select class="2" id="ouEffectLED" name="selEffect">');
              Write('<option value="0">${lblOff}</option>');
              Write('<option value="1">Static</option>');
              Write('<option value="2">Blink</option>');
              Write('<option value="3">Breath</option>');
              Write('<option value="4">Color Wipe</option>');
              Write('<option value="5">Color Wipe Inverse</option>');
              Write('<option value="6">Color Wipe Reverse</option>');
              Write('<option value="7">Color Wipe Reverse Inverse</option>');
              Write('<option value="8">Color Wipe Random</option>');
              Write('<option value="9">Random Color</option>');
              Write('<option value="10">Single Dynamic</option>');
              Write('<option value="11">Multi Dynamic</option>');
              Write('<option value="12">Rainbow</option>');
              Write('<option value="13">Rainbow Cycle</option>');
              Write('<option value="14">Scan</option>');
              Write('<option value="15">Dual Scan</option>');
              Write('<option value="16">Fade</option>');
              Write('<option value="17">Theater Chase</option>');
              Write('<option value="18">Theater Chase Rainbow</option>');
              Write('<option value="19">Running Lights</option>');
              Write('<option value="20">Twinkle</option>');
              Write('<option value="21">Twinkle Random</option>');
              Write('<option value="22">Twinkle Fade</option>');
              Write('<option value="23">Twinkle Fade Random</option>');
              Write('<option value="24">Sparkle</option>');
              Write('<option value="25">Flash Sparkle</option>');
              Write('<option value="26">Hyper Sparkle</option>');
              Write('<option value="27">Strobe</option>');
              Write('<option value="28">Strobe Rainbow</option>');
              Write('<option value="29">Multi Strobe</option>');
              Write('<option value="30">Blink Rainbow</option>');
              Write('<option value="31">Chase White</option>');
              Write('<option value="32">Chase Color</option>');
              Write('<option value="33">Chase Random</option>');
              Write('<option value="34">Chase Rainbow</option>');
              Write('<option value="35">Chase Flash</option>');
              Write('<option value="36">Chase Flash Random</option>');
              Write('<option value="37">Chase Rainbow White</option>');
              Write('<option value="38">Chase Blackout</option>');
              Write('<option value="39">Chase Blackout Rainbow</option>');
              Write('<option value="40">Color Sweep Random</option>');
              Write('<option value="41">Running Color</option>');
              Write('<option value="42">Running Red Blue</option>');
              Write('<option value="43">Running Random</option>');
              Write('<option value="44">Larson Scanner</option>');
              Write('<option value="45">Comet</option>');
              Write('<option value="46">Fireworks</option>');
              Write('<option value="47">Fireworks Random</option>');
              Write('<option value="48">Merry Christmas</option>');
              Write('<option value="49">Fire Flicker</option>');
              Write('<option value="50">Fire Flicker (soft)</option>');
              Write('<option value="51">Fire Flicker (intense)</option>');
              Write('<option value="52">Circus Combustus</option>');
              Write('<option value="53">Halloween</option>');
              Write('<option value="54">Bicolor Chase</option>');
              Write('<option value="55">Tricolor Chase</option>');
              Write('<option value="56">TwinkleFOX</option>');
              Write('<option value="57">Spots</option>');
              Write('<option value="58">Custom 1</option>');
              Write('<option value="59">Custom 2</option>');
              Write('<option value="60">Custom 3</option>');
              Write('<option value="61">Custom 4</option>');
              Write('<option value="62">Custom 5</option>');
              Write('<option value="63">Custom 6</option>');            
              Write('<option value="64">Custom 7</option>');            
             Write('</select>');
            Write('</td>');
          Write('</tr>');
          
          Write('</tr>');
            ! Rot
            Write('<td colspan="6" class="OUCFMprop"><span>${colorRED} <span class="hintMinMaxCount"></span></span></td>');
            Write('<td colspan="5"><input id="ouRedLED" type="text" style="text-align:center;" size="3"></td>');
          Write('</tr>');

          Write('</tr>');
            ! Gruen
            Write('<td colspan="6" class="OUCFMprop"><span>${colorGREEN} <span class="hintMinMaxCount"></span></span></td>');
            Write('<td colspan="5"><input id="ouGreenLED" type="text" style="text-align:center;" size="3"></td>');
          Write('</tr>');
          
          Write('</tr>');
            ! Blau
            Write('<td colspan="6" class="OUCFMprop"><span>${colorBLUE} <span class="hintMinMaxCount"></span></span></td>');
            Write('<td colspan="5"><input id="ouBlueLED" type="text" style="text-align:center;" size="3"></td>');
          Write('</tr>');
          
          Write('</tr>');
            ! Weiss
            Write('<td colspan="6" class="OUCFMprop"><span>${colorWHITE} <span class="hintMinMaxCount"></span></span></td>');
            Write('<td colspan="5"><input id="ouWhiteLED" type="text" style="text-align:center;" size="3"></td>');
          Write('</tr>');
          
          Write('<tr id="manualDurationLED">');
            ! Dauer hh:mm:ss
            Write('<td colspan="6"  class="OUCFMprop"><span>${lblDurationHHmmSS} </span></td>');
            Write('<td colspan="5" style="color:#000000"><input id="ouCFMDurationHHLED" type="text" style="text-align:center;" size="3">:<input id="ouCFMDurationMMLED" type="text" style="text-align:center;" size="3">:<input id="ouCFMDurationSSLED" type="text" style="text-align:center;" size="3"></td>');
          Write('</tr>');
          
        Write('</tbody>');

      %>
    </table>

    <table class="popupTableScript" class="01201">
      <tr class="popupTableRow">
        <td class="CLASS01210">
          <div class="FooterButton" onclick="PopupClose()" class="CLASS01211">${btnCancel}</div>
        </td>
        <td class="CLASS01210">
          <div class="FooterButton" class="CLASS01211" style="float:right" onclick="SaveOUCFMModeSettings();">${btnOk}</div>
        </td>
      </tr>
    </table>
</div>

<script type="text/javascript">
  chnID = '<% Write( iVCH ); %>';
  dpID = '<% Write( iV ); %>';
  conInfo('channel id = '+chnID+' | dp id = '+dpID);
  
  var oldVal = 0; 
  <%
    if( bIsString )
    {
      if( oSD )
      {
        Write('conInfo( "'#oSD.DestinationValue()#'" );');
        Write('oldVal = "'#oSD.DestinationValue()#'";');
      }
    }
    else
    {
      if( oSD && oDP )
      {
        Write('oldVal = '#oDP.ValueMin()#';'); 
        if( oDP.ValueUnit() == "100%" )
        {
          Write('oldVal = oldVal * 100;');
        }
      }
    }
  %>
function init()  {
  var channelType = getChannelType();

  showRelevantTbl(channelType); 
  setChannel1();

  dlgPopup.readaptSize();
};

function setChannel1() {
  var minMaxValues = getMaxValues();
  var origValue = '<% Write( iV ); %>'; // z. B. 0.8,1,108000,1,2,3,4,7
  
  if (origValue == 0 || origValue == "0") {
    origValue = getDefaultValue(1);//"0,0," + minMaxValues.max.duration + ",0";
  }
  //console.log("origValue="+origValue);
  var origValues = origValue.split(","); 
  var brightness = parseInt(origValues[1]); // 0 - 255
  var duration = parseInt(origValues[2]); // 0 - 108000
  var speed = parseInt(origValues[3]); // 0 - 255
  var effect = parseInt(origValues[4]); // 0 - 255
  var red = parseInt(origValues[5]); // 0 - 255
  var green = parseInt(origValues[6]); // 0 - 255
  var blue = parseInt(origValues[7]); // 0 - 255
  var white = parseInt(origValues[8]); // 0 - 255
  var oTime = convertSeconds2HHMMSS(duration, minMaxValues.max.duration); 

  document.getElementById("ouSpeedLED").value = speed;
  document.getElementById("ouBrightnessLED").value = brightness;
  document.getElementById("ouEffectLED").value = effect;
  document.getElementById("ouRedLED").value = red;
  document.getElementById("ouGreenLED").value = green;
  document.getElementById("ouBlueLED").value = blue;
  document.getElementById("ouWhiteLED").value = white;
  document.getElementById("ouCFMDurationHHLED").value = oTime.hr;
  document.getElementById("ouCFMDurationMMLED").value = oTime.min;
  document.getElementById("ouCFMDurationSSLED").value = oTime.sec;
  getOUCFMLEDAction(origValues);

  setHintMinMax(minMaxValues);
   
};

function getDefaultValue(ch) {
  return "0,128,0,128,1,255,0,0,0,0";
};

function setHintMinMax(minMax) {
  var minMaxCountElems = $$(".hintMinMaxCount");
  
  for (var loop = 0; loop < minMaxCountElems.length; loop++) {
    //minMaxCountElems[loop].innerHTML = "(" + minMax.min.count + " - " + minMax.max.count + ")";
    minMaxCountElems[loop].appendChild(document.createTextNode("(" + minMax.min.brightness + " - " + minMax.max.brightness + ")"));
  }
};


// setzt die Radio-Buttons entsprechend des Wertes
function getOUCFMLEDAction(values) {
  var arrValues = [];
  var isZero = false;
  
  if (isZero == false) {
      arrValues.push(values[4]); // we need the value as hex val   
      
      // beim ersten Auftreten einer 0 sind alle weiteren Einträge auch auf 0 zu setzen
      if (parseInt(values[4]) == 0) {
        isZero = true;
      }
    } else {
      arrValues.push(0); // we need the value as hex val   
  }
  
  //printArray(arrValues);
  
  //nimm dir jede der 10 Spalten einzeln vor
    var arrRadioButtons = document.getElementsByName("r0"); // alle Buttons der jeweiligen Spalte
    
    // gehe durch alle Buttons und setze denjenigen aktiv, dessen Wert gefunden wurde
    for (var loopy = 0; loopy < arrRadioButtons.length; loopy++) {
      
      //console.log(arrRadioButtons[loopy].value + " " + arrValues[loop]);

      if (arrRadioButtons[loopy].value == arrValues[0]) {
        arrRadioButtons[loopy].checked = true;
      }
    }
};

function convertSeconds2HHMMSS(seconds, maxValue) {
  
  // HM-1313  
  if (seconds >= maxValue) {
    seconds = 0;
  }

  var hhmmss = {};
  hhmmss.hr = parseInt(seconds / 3600);
  seconds %= 3600;
  hhmmss.min = parseInt(seconds / 60);
  hhmmss.sec = seconds % 60;
 
  hhmmss.hr = (hhmmss.hr < 10) ? "0" + hhmmss.hr : hhmmss.hr;
  hhmmss.min = (hhmmss.min < 10) ? "0" + hhmmss.min : hhmmss.min;
  hhmmss.sec = (hhmmss.sec < 10) ? "0" + hhmmss.sec : hhmmss.sec;

  return hhmmss;  
};


// Returns the channel type, currently either 'SIGNAL_LED' or 'SIGNAL_CHIME'
function getChannelType() {
  return '<% Write( dom.GetObject(oCH).HssType()); %>'; 
};

function getChannelLabel() {
  return '<% Write( dom.GetObject(oCH).Label()); %>';
}

function showRelevantTbl(chType) {
  var tblID = {};

  tblID.SIGNAL_LED = "tblLED";
  tblID.SIGNAL_CHIME = "tblCHIME";

  var tbl = document.getElementById(tblID[chType]);
  tbl.style.display = "table";
};

function showManualDurationElem(mode, name) {
  var manualDurationElm = document.getElementById("manual" + name);

  if (mode == "true") {
    manualDurationElm.style.visibility = "visible";
  } else {
    manualDurationElm.style.visibility = "hidden";
  }
};
  
function getMaxValues() {
  var minMax = {};
  
  minMax.min = {};
  minMax.max = {};

  minMax.min.brightness = 0;
  minMax.min.duration = 0;
  minMax.min.speed = 0;
  minMax.min.effect = 0;
  minMax.min.red = 0;
  minMax.min.green = 0;
  minMax.min.blue = 0;

  minMax.max.brightness = 255;
  minMax.max.duration = 108000;
  minMax.max.speed = 255;
  minMax.max.effect = 255;
  minMax.max.red = 255;
  minMax.max.green = 255;
  minMax.max.blue = 255;
  minMax.max.white = 255;

  return minMax;
};

function setMinMax(param, val) {
  var minMax = getMaxValues();
  var value = 0;
   
  if(isNaN(parseInt(val))) {
    value = minMax.min[param];
    return value;
  }

  value = (parseInt(val) < minMax.min[param]) ? minMax.min[param] : val ;
  value = (parseInt(value) > minMax.max[param]) ? minMax.max[param] : value ;

  return value;
};

function checkMinMax(oVal) {
  oVal["speed"] = setMinMax("speed", oVal.speed);
  oVal["brightness"] = setMinMax("brightness", oVal.brightness);
  oVal["effect"] = setMinMax("effect", oVal.effect);
  oVal["red"] = setMinMax("red", oVal.red);
  oVal["green"] = setMinMax("green", oVal.green);
  oVal["blue"] = setMinMax("blue", oVal.blue);
  oVal["white"] = setMinMax("white", oVal.white);
  oVal["duration"] = setMinMax("duration", oVal.duration);
  
  return oVal;
};

function getUserTime(ch) {
  
  var LED = "LED";
    
  var newTime = 0;
  var timeHH = parseInt(document.getElementById("ouCFMDurationHH" + LED).value); 
  var timeMM = parseInt(document.getElementById("ouCFMDurationMM" + LED).value);
  var timeSS = parseInt(document.getElementById("ouCFMDurationSS" + LED).value);
  var changeDurationSelBox = document.getElementById("changeDurationMode" + LED);
  var minMaxValues = getMaxValues();
  
  if (changeDurationSelBox != null && changeDurationSelBox.options[0].selected == true) {
   // maximaler Wert 
   newTime = minMaxValues.max.duration;       
  } else {
  
    if (timeHH > 0) {
      newTime += timeHH * 3600;
    }
    if (timeMM > 0) {
      newTime += timeMM * 60;
    } 
  
    newTime += timeSS; 
  }
  
  return newTime.toString();
};


function getLEDSettings() {
  var oValues = {};
  var settings = "0,";
 
  oValues.brightness = document.getElementById("ouBrightnessLED").value;
  oValues.speed = document.getElementById("ouSpeedLED").value;
  oValues.effect = document.getElementById("ouEffectLED").value;
  oValues.red = document.getElementById("ouRedLED").value;
  oValues.green = document.getElementById("ouGreenLED").value;
  oValues.blue = document.getElementById("ouBlueLED").value;
  oValues.white = document.getElementById("ouWhiteLED").value;
  oValues.duration = getUserTime(1); 

    
  oValues = checkMinMax(oValues);
 
  settings += oValues.brightness + ",";
  settings += oValues.duration+ ",";
  settings += oValues.speed +",";
  settings += oValues.effect +",";
  settings += oValues.red +",";
  settings += oValues.green +",";
  settings += oValues.blue +",";
  settings += oValues.white;
  console.log("settings: " + settings);
  
  return settings;

};


// schaltet manuelle Zeiteingabe sichtbar - unsichtbar
function changeDurationMode(elem) {
  var durationModeSelBox = document.getElementById(elem.id);   
  var modus = durationModeSelBox.options[durationModeSelBox.selectedIndex].value ;
    
  showManualDurationElem(modus, elem.name); 
};

changeDurMode = function(elem) {
  changeDurationMode(elem);
};

SaveOUCFMModeSettings = function()
{
  value = getLEDSettings();  
  
  <%
  Write( 'conInfo("SaveOUCFMModeSettings = '#oSD.ID()#'");' );
  %>
  // iseSingleDestination.SetValueAndTypeMinMax( <% Write( oSD.ID() ); %>, value, <% Write( oDP.ValueType() ); %>, minValue, maxValue);
  iseSingleDestination.SetValueAndType( <% Write( oSD.ID() ); %>, value, <% Write( oDP.ValueType() ); %>);

};

channelChooser = function()
{
  ChannelChooser.show( function(result)
  {
    if (result)
    {
      chnID = result;
      loadChannelEdit();
    }
  }, ChannelChooser.SHOW_ALL);
};

  sysvarChooser = function()
  {
    var iTypeSelectIndex = $('chaType').selectedIndex;
    dlgResult = "";
    var chooserPopup = new iseMessageBox(ID_SYS_VARS_SELECTION,0,true);
    restorePrevious = function()
    {
      chooserPopup.restorePrevious();
      dlgPopup.readaptSize();
      if (dlgResult != "")
      {
        dpID = dlgResult;
      }
      loadSystemEdit();
    }
    chooserPopup.ShowPopup();
  }

  // Eingegebenen Werte speichern
  saveSysVar = function() {
  }

  changeType = function()
  {
    bOkAllowed = false;
    chnID = 0;
    dpID = 0;
    var iType = $("chaType").selectedIndex;
    switch(iType)
    {
      case 0:
        loadInsertEdit();
        break;
      case 1:
        loadChannelEdit();
        break;
      case 2:
        loadSystemEdit();
        break;
    }
  }
  
  loadInsertEdit = function()
  {
    $("chaType").selectedIndex = 0;
    bOkAllowed = false;
    <%
      string s = "";
      if( bIsString )
      {
        s = s#"<div id='tdEdit'>";
        s = s#"<textarea id='txtVal' cols='20' rows='2' class='CLASS1205'>";
        s = s#"</textarea>";
        s = s#"</div>";
      }
      else
      {
        s = s#"<a class='CLASS01206'>auf</a>";
        s = s#"<input id='txtVal' type='text' class='CLASS01207' value="; s = s#oDP.ValueMin(); s = s#" size='4'/>";
        s = s#"<a class='CLASS01213'>";
        s = s#"<img src='/ise/img/up.png' onclick='valueUp()' value='0' class='CLASS01208'/>";
        s = s#"</a>";
        s = s#"<a class='CLASS01214'>";
        s = s#"<img src='/ise/img/down.png' onclick='valueDown()' class='CLASS01208'/>";
        s = s#"</a>";
        s = s#"<a class='CLASS01209'>";
        
        if (oDP.ValueUnit() == "100%")
        {
          s = s#"%";
        } 
        else 
        {
          s = s#oDP.ValueUnit();
        }
        s = s#"</a>";
        s = s#"</div>";
      }
    %>
    $("tdEdit").innerHTML = "<% Write(s); %>";
    bOkAllowed = true;
  }
    
  loadChannelEdit = function()
  {
    bOkAllowed = false;  
    $("chaType").selectedIndex = 1;
    var s = "";
    s += "<table class='CLASS01212'>";
    s += "<tr>";
    s += "<td>";
    s += "<span id='chnName' onclick='channelChooser()' class='CLASS01215'>...</span> <span id='chnDP' style='display:none;'></span>";
    s += "<div id='chnBtn' onclick='channelChooser()' class='CLASS01217' style='display:none;'>Kanalauswahl</div>";
    s += "</td>";
    s += "</tr>";
    s += "</table>";
    $("tdEdit").innerHTML = s;
    
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "getChnNameById";';
    pb += 'integer id = "'+chnID+'";';
    var opts =
    {
      postBody: pb
    };
    new Ajax.Updater("chnName", url, opts);
    
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "CreateDPSelectBox";';
    pb += 'string chid = "'+chnID+'";';
    pb += 'string sdid = "<% Write(oSD.ID()); %>";';
    var opts =
    {
      postBody: pb,
      onComplete: function(t)
      {
        if( iseStripAll(t.responseText) == "" )
        {
          $("chnBtn").show();
        }
        else
        {
          $("chnBtn").hide();
          bOkAllowed = true;
        }
      }
    };
    new Ajax.Updater("chnDP", url, opts);
    
    $("chnDP").show();
  }
  
  loadSystemEdit = function()
  {
    bOkAllowed = false;
    $("chaType").selectedIndex = 2;
    var s = "";
    s += "<table>";
    s += "<tr>";
    s += "<td><span id='sysName' onclick='sysvarChooser()' class='CLASS01215'></span> <span id='sysDP' style='display:none;'></span>";
    s += "<div id='sysBtn' onclick='sysvarChooser()' class='CLASS01217' style='display:none;'>Auswahl";
    s += "</div>";
    s += "</td>";
    s += "</tr>";
    s += "</table>";
    $("tdEdit").innerHTML = s;
    
    var url = "/esp/system.htm?sid="+SessionId;
    var pb = '';
    pb += 'string action = "getChnNameById";';
    pb += 'integer id = "'+dpID+'";';
    var opts =
    {
      postBody: pb,
      onComplete: function(t)
      {
        if( iseStripAll(t.responseText) == "" )
        {
          $("sysBtn").show();
        }
        else
        {
          $("sysBtn").hide();
          bOkAllowed = true;
        }
      }
    };
    new Ajax.Updater("sysName", url, opts);
    $("sysName").show();
  }
  <%
    if( iVT == ivtObjectId )
    {
      Write( 'loadChannelEdit();' );
    }
    if( iVT == ivtSystemId )
    {
      Write( 'loadSystemEdit();' );
    }
  %>
  init();
  
</script>
